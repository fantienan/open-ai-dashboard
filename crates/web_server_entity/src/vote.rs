//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "vote")]
pub struct Model {
  #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
  pub chat_id: String,
  #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
  pub message_id: String,
  pub is_upvoted: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
  #[sea_orm(
    belongs_to = "super::chat::Entity",
    from = "Column::ChatId",
    to = "super::chat::Column::Id",
    on_update = "NoAction",
    on_delete = "NoAction"
  )]
  Chat,
  #[sea_orm(
    belongs_to = "super::message::Entity",
    from = "Column::MessageId",
    to = "super::message::Column::Id",
    on_update = "NoAction",
    on_delete = "NoAction"
  )]
  Message,
}

impl Related<super::chat::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Chat.def()
  }
}

impl Related<super::message::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Message.def()
  }
}

impl ActiveModelBehavior for ActiveModel {}
