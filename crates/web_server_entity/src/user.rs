//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11

use sea_orm::{
  ActiveValue::{self, Set},
  entity::prelude::*,
};
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "user")]
pub struct Model {
  #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
  pub id: String,
  #[sea_orm(column_type = "Text")]
  pub email: String,
  #[sea_orm(column_type = "Text", nullable)]
  pub password: Option<String>,
  #[sea_orm(column_type = "Text")]
  pub created_at: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
  #[sea_orm(has_many = "super::chat::Entity")]
  Chat,
  #[sea_orm(has_many = "super::dashboard::Entity")]
  Dashboard,
}

impl Related<super::chat::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Chat.def()
  }
}

impl Related<super::dashboard::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Dashboard.def()
  }
}

#[async_trait::async_trait]
impl ActiveModelBehavior for ActiveModel {
  async fn before_save<C>(self, _db: &C, insert: bool) -> Result<Self, DbErr>
  where
    C: ConnectionTrait,
  {
    if insert {
      let mut this = self;
      if this.created_at.is_not_set() {
        this.created_at = ActiveValue::Set(common::chrono::gen_now_date_time_string());
      }

      if this.id.is_not_set() {
        this.id = ActiveValue::Set(uuid::Uuid::new_v4().to_string());
      }
      Ok(this)
    } else {
      Ok(self)
    }
  }
}

// 定义一个 trait，用于表示可以转换为 User 的类型要求
pub trait UserLike {
  fn id(&self) -> String;
  fn email(&self) -> String;
  fn created_at(&self) -> String;
}

impl<T> From<T> for Model
where
  T: UserLike,
{
  fn from(model: T) -> Self {
    Self {
      id: model.id(),
      email: model.email(),
      password: None,
      created_at: model.created_at(),
    }
  }
}

impl Model {
  pub async fn find_by_id(db: &DbConn, id: &String) -> Result<Option<Model>, DbErr> {
    Entity::find().filter(Column::Id.eq(id)).one(db).await
  }
  pub async fn find_by_email(db: &DbConn, email: &String) -> Result<Option<Model>, DbErr> {
    Entity::find().filter(Column::Email.eq(email)).one(db).await
  }

  pub async fn insert(db: &DbConn, email: String) -> Result<Model, DbErr> {
    let new_user = ActiveModel {
      email: Set(email),
      ..Default::default()
    };
    new_user.insert(db).await
  }
}
