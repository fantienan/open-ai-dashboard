//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11

use common::types::dashboard::DashboardConfig;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "dashboard")]
pub struct Model {
  #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
  pub chat_id: String,
  #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
  pub message_id: String,
  #[sea_orm(column_type = "Text")]
  pub created_at: String,
  #[sea_orm(column_type = "Text")]
  pub user_id: String,
  #[sea_orm(column_type = "Text")]
  pub data: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
  #[sea_orm(
    belongs_to = "super::chat::Entity",
    from = "Column::ChatId",
    to = "super::chat::Column::Id",
    on_update = "NoAction",
    on_delete = "NoAction"
  )]
  Chat,
  #[sea_orm(
    belongs_to = "super::message::Entity",
    from = "Column::MessageId",
    to = "super::message::Column::Id",
    on_update = "NoAction",
    on_delete = "NoAction"
  )]
  Message,
  #[sea_orm(
    belongs_to = "super::user::Entity",
    from = "Column::UserId",
    to = "super::user::Column::Id",
    on_update = "NoAction",
    on_delete = "NoAction"
  )]
  User,
}

impl Related<super::chat::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Chat.def()
  }
}

impl Related<super::message::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Message.def()
  }
}

impl Related<super::user::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::User.def()
  }
}

impl ActiveModelBehavior for ActiveModel {}

impl Model {
  pub fn parse_data(&self) -> Result<DashboardConfig, String> {
    let dashboard_config: DashboardConfig =
      serde_json::from_str(&self.data).map_err(|e| e.to_string())?;
    Ok(dashboard_config)
  }

  pub async fn find_by_primary_key(
    db: &DbConn,
    chat_id: &String,
    message_id: &String,
  ) -> Result<Option<Model>, DbErr> {
    Entity::find()
      .filter(Column::ChatId.eq(chat_id))
      .filter(Column::MessageId.eq(message_id))
      .one(db)
      .await
  }
}
